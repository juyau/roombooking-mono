package com.brothermiles.studyon.cms.service;

import com.brothermiles.studyon.cms.dao.CmsPageRepository;
import com.brothermiles.studyon.common.exception.ExceptionCast;
import com.brothermiles.studyon.common.model.response.*;
import com.brothermiles.studyon.model.cms.CmsPage;
import com.brothermiles.studyon.model.cms.request.QueryPageRequest;
import com.brothermiles.studyon.model.cms.response.CmsCode;
import com.brothermiles.studyon.model.cms.response.CmsPageResult;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class PageService {
    @Autowired
    CmsPageRepository cmsPageRepository;

    public QueryListResponseResult findList(int page, int size, QueryPageRequest queryPageRequest){

        if(queryPageRequest == null){
            queryPageRequest = new QueryPageRequest();
        }
        if(page <=0 ){
            page = 1;
        }
        page = page -1;

        if(size <= 0 ){
            size = 10;
        }
        Pageable pageable = PageRequest.of(page, size);

        CmsPage cmsPage = new CmsPage();

        if(StringUtils.isEmpty(queryPageRequest.getPageAliase())){
            cmsPage.setPageAliase(queryPageRequest.getPageAliase());
        }

        if(StringUtils.isEmpty(queryPageRequest.getSiteId())){
            cmsPage.setSiteId(queryPageRequest.getSiteId());
        }

        if(StringUtils.isEmpty(queryPageRequest.getTemplateId())){
            cmsPage.setTemplateId(queryPageRequest.getTemplateId());
        }

        ExampleMatcher exampleMatcher = ExampleMatcher.matching().withMatcher("pageAliase", ExampleMatcher.GenericPropertyMatchers.contains());
        Example<CmsPage> example = Example.of(cmsPage, exampleMatcher);
        Page<CmsPage> list = cmsPageRepository.findAll(example, pageable);

        QueryListResult<CmsPage> queryResult = new QueryListResult<>();
        queryResult.setList(list.getContent());
        queryResult.setTotal(list.getTotalElements());

        return new QueryListResponseResult(CommonCode.SUCCESS, queryResult);
    }

    public CmsPageResult add(CmsPage cmsPage){
        CmsPage cmsPage1 = cmsPageRepository.findByPageNameAndSiteIdAndPageWebPath(cmsPage.getPageName(), cmsPage.getSiteId(), cmsPage.getPageWebPath());
        if(cmsPage1 != null){
            ExceptionCast.cast(CmsCode.CMS_ADDPAGE_EXISTSNAME);
        }

        cmsPage.setPageId(null); //primary ID should be generated by Spring data
        CmsPage savedPage = cmsPageRepository.save(cmsPage);
        return new CmsPageResult(CommonCode.SUCCESS, savedPage);

    }

    public CmsPage findById(String id){
        Optional<CmsPage> optional = cmsPageRepository.findById(id);
        return optional.orElse(null);
    }

    public CmsPageResult update(String id, CmsPage cmsPage){
        CmsPage cmsPage1 = this.findById(id);
        if(cmsPage1 != null){
            BeanUtils.copyProperties(cmsPage, cmsPage1);
            cmsPageRepository.save(cmsPage1);
            return new CmsPageResult(CommonCode.SUCCESS, cmsPage1);
        }
        return new CmsPageResult(CommonCode.FAIL, null);

    }

    public ResponseResult deleteById(String id){
        Optional<CmsPage> byId = cmsPageRepository.findById(id);
        if(byId.isPresent()){
            cmsPageRepository.deleteById(id);
            return new ResponseResult(CommonCode.SUCCESS);
        }
        return new ResponseResult(CommonCode.FAIL);
    }

}
